     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 89AC5A0F                    r dd 00001111010110101010110010001001b ;
    15 00000004 E1551007                    t dd 00000111000100000101010111100001b ;
    16 00000008 <res 00000004>              q resd 1 
    17                                  ; our code starts here
    18                                  segment code use32 class=code
    19                                      start:
    20                                          ; ...
    21                                          
    22                                          ;Se dau 2 dublucuvinte R si T. Sa se obtina dublucuvantul Q astfel:
    23                                          ;   bitii 0-6 din Q coincid cu bitii 10-16 a lui T
    24                                          ;   bitii 7-24 din Q concid cu bitii obtinuti 7-24 in urma aplicarii R XOR T.
    25                                          ;   bitii 25-31 din Q coincid cu bitii 5-11 a lui R.
    26                                           
    27 00000000 BB00000000                      mov ebx, 0; rezultatul se va afla in ebx
    28                                          
    29                                          
    30                                          ;   bitii 0-6 din Q coincid cu bitii 10-16 a lui T
    31 00000005 A1[04000000]                    mov eax, [t]
    32 0000000A 2500FC0100                      and eax, 00000000000000011111110000000000b; izolvam 10-16
    33 0000000F B10A                            mov cl, 10
    34 00000011 D3C8                            ror eax, cl ; rotesc la dreapta 
    35 00000013 09C3                            or  ebx, eax ; apoi pun rezultat in ebx 
    36                                          
    37                                          
    38                                          ;   bitii 7-24 din Q concid cu bitii obtinuti 7-24 in urma aplicarii R XOR T.
    39                                          
    40 00000015 8B15[04000000]                  mov edx, [t]
    41 0000001B A1[00000000]                    mov eax, [r]
    42 00000020 31C2                            xor edx, eax 
    43 00000022 81E280FFFF01                    and edx, 00000001111111111111111110000000b
    44 00000028 09D3                            or  ebx, edx
    45                                          
    46                                          ; bitii 25-31 din Q coincid cu bitii 5-11 a lui R.
    47 0000002A A1[00000000]                    mov eax, [r]
    48 0000002F 25E00F0000                      and eax, 00000000000000000000111111100000b
    49 00000034 B114                            mov cl, 20
    50 00000036 D3C0                            rol eax, cl
    51 00000038 09C3                            or ebx, eax
    52                                          
    53 0000003A 891D[08000000]                  mov [q], ebx
    54                                          ; exit(0)
    55 00000040 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    56 00000042 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
