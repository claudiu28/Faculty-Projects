     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll 
     9                                  ;Se da un sir de dublucuvinte. Sa se obtina sirul format din octetii superiori ai cuvintelor inferioare din elementele sirului de dublucuvinte, ;care sunt multiplii de 10.
    10                                  ;Exemplu:
    11                                  ;Se da sirul de dublucuvinte:
    12                                  ;s DD 12345678h, 1A2B3C4Dh, FE98DC76h 
    13                                  ;Sa se obtina sirul
    14                                  ;d DB 3Ch, DCh.
    15                                  
    16                                  segment data use32 class=data
    17                                      ; ...
    18 00000000 785634124D3C2B1A76-         s dd 12345678h, 1A2B3C4Dh, 0FE98DC76h
    18 00000009 DC98FE             
    19                                      lg equ ($ - s) / 4
    20 0000000C 00<rept>                    d times lg db 0
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24                                          ; // varianta_a
    25 00000000 B903000000                      mov ecx, lg ;lungime sir in ECX
    26 00000005 E321                            jecxz Sfarsit  ; daca ecx este 0    
    27                                          
    28 00000007 BE[00000000]                    mov esi, s ; la adresa primului sir, s
    29 0000000C BF[0C000000]                    mov edi, d ; la adresa celui de al doilea sir, d
    30                                          
    31 00000011 FC                              cld ; DF = 0 
    32                                          repeta:
    33 00000012 AD                                  lodsd ; EAX dublucuvint
    34 00000013 B300                                mov bl, 0 ; rezultat obtinut
    35 00000015 88E3                                mov bl, ah ; partea superioara din cuvant
    36                                              
    37 00000017 88D8                                mov al, bl ; pun in partea inferioara pentru al putea imparti
    38 00000019 B400                                mov ah, 0 ; pentru a avea loc impartirea ax / 10 = al rest ah
    39 0000001B B20A                                mov dl, 10
    40 0000001D F6F2                                div dl
    41                                              
    42 0000001F 84E4                                test ah,ah ; daca ah != 0 modfica valoare zf
    43 00000021 7503                                jne not_multiplu ; neg in caz ca s-a modficat
    44                                              
    45 00000023 88D8                                mov al, bl ; in caz ca nu s-a modficat stochez in al valoarea inferioara initiala
    46 00000025 AA                                  stosb ; incrementez edi si pun in d
    47                                          
    48                                          not_multiplu:
    49 00000026 E2EA                                loop repeta ; decrementare ecx
    50                                          
    51                                      Sfarsit:    ; exit(0)
    52 00000028 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    53 0000002A FF15[00000000]                  call    [exit]       ; call exit to terminate the program
