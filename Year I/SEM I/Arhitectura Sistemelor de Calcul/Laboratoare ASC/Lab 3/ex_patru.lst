     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 01                          b db 1 ; byte
    15 00000001 0100                        a dw 1
    16 00000003 0100                        c dw 1 ; word
    17 00000005 01000000                    d dd 1
    18 00000009 0100000000000000            x dq 1
    19                                  ; (a*a+b/c-1)/(b+c)+d-x => 0
    20                                                             ; a-word; b-byte; c-word; d-doubleword; x-qword 
    21                                  ; cu semn
    22                                  segment code use32 class=code
    23                                      start:
    24                                          ; ...
    25                                          ; cu semn
    26 00000000 66A1[01000000]                  mov ax, [a]
    27 00000006 66F72D[01000000]                imul word[a]
    28 0000000D 6689C3                          mov bx, ax
    29 00000010 6689D1                          mov cx, dx
    30 00000013 A0[00000000]                    mov al, [b]
    31 00000018 6698                            cbw
    32 0000001A 98                              cwde
    33 0000001B 66F73D[03000000]                idiv word[c]
    34 00000022 6601D8                          add ax, bx
    35 00000025 6611CA                          adc dx, cx
    36                                          
    37 00000028 6650                            push ax
    38 0000002A 6652                            push dx
    39 0000002C 5B                              pop ebx
    40                                          
    41 0000002D A0[00000000]                    mov al, [b]
    42 00000032 6698                            cbw
    43 00000034 660305[03000000]                add ax, [c]
    44 0000003B 6689C1                          mov cx, ax
    45 0000003E 89D8                            mov eax, ebx
    46 00000040 66F7F9                          idiv cx
    47 00000043 6652                            push dx
    48 00000045 6650                            push ax
    49 00000047 58                              pop eax
    50                                          
    51 00000048 0305[05000000]                  add eax, [d]
    52 0000004E 99                              cdq
    53 0000004F 2B05[09000000]                  sub eax, [x]
    54 00000055 1B15[0D000000]                  sbb edx, [x + 4]
    55                                          ; exit(0)
    56 0000005B 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    57 0000005D FF15[00000000]                  call    [exit]       ; call exit to terminate the program
