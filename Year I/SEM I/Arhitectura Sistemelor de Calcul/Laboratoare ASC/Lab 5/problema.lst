     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  
    13                                  ; Enunt problema:
    14                                  ; Se da un sir de octeti S. Sa se determine maximul elementelor de pe pozitiile pare si minimul elementelor de pe pozitiile impare din S.
    15                                  ; Exemplu:
    16                                  ; S: 1, 4, 2, 3, 8, 4, 9, 5
    17                                  ; max_poz_pare: 9
    18                                  ; min_poz_impare: 3
    19                                  
    20                                  segment data use32 class=data
    21 00000000 0104020308040905            s db 1, 4, 2, 3, 8, 4, 9, 5
    22                                      lungime equ $ - s ; lungime sir
    23 00000008 00                          maxim db 0
    24 00000009 FF                          minim db 255
    25                                   
    26                                  ; our code starts here
    27                                  segment code use32 class=code
    28                                      start:
    29                                          ; ...
    30                                         
    31 00000000 B908000000                      mov ecx, lungime
    32 00000005 E336                            jecxz Sfarsit
    33 00000007 BE00000000                      mov esi, 0
    34                                          
    35                                          Repeta:
    36 0000000C 8A86[00000000]                      mov al, [s + esi] ; s[esi]
    37 00000012 F7C601000000                        test esi, 01h ; verficare ca esi e par
    38 00000018 7411                                jz e_par ; in caz e par
    39                                              
    40                                              
    41 0000001A 8A15[09000000]                      mov dl, [minim] ; incarca valoarea minim in dl
    42 00000020 38D0                                cmp al, dl ; vedem zf && cf
    43 00000022 7316                                jae mai_departe ; negam conditie normala (minim < s[i])
    44                                              
    45                                              
    46 00000024 A2[09000000]                        mov [minim], al ; actualizare minim
    47 00000029 EB0F                                jmp mai_departe ; sari mai departe
    48                                          
    49                                          e_par:
    50                                              
    51 0000002B 8A1D[08000000]                      mov bl, [maxim] ; punem maxim in dl 
    52 00000031 38D8                                cmp al, bl ; vedem zf && cf
    53 00000033 7605                                jbe mai_departe ; (maxim > s[i])
    54                                              
    55 00000035 A2[08000000]                        mov [maxim], al ;actualizam maxim
    56                                          
    57                                          mai_departe:
    58 0000003A 46                                  inc esi ; incrementare
    59 0000003B E2CF                                loop Repeta
    60                                          
    61                                          Sfarsit:
    62 0000003D 6A00                                push    dword 0
    63 0000003F FF15[00000000]                      call    [exit]
