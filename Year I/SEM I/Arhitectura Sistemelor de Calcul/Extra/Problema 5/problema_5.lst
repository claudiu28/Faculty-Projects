     1                                  bits 32
     2                                  
     3                                  global start
     4                                  extern printf, scanf, exit, gets
     5                                  
     6                                  import printf msvcrt.dll
     7                                  import scanf msvcrt.dll
     8                                  import exit msvcrt.dll
     9                                  import gets msvcrt.dll
    10                                  
    11                                  segment data use32 class = data
    12                                  
    13 00000000 00<rept>                    text times 200 db 0
    14 000000C8 00<rept>                    sir_litere_mici times 200 db 0
    15 00000190 00<rept>                    sir_litere_mari times 200 db 0
    16 00000258 25730A00                    format db "%s", 10, 0
    17                                      
    18                                  segment code use32 class = code
    19                                  
    20                                      start:
    21                                          
    22 00000000 68[00000000]                    push dword text
    23 00000005 FF15[00000000]                  call [gets]
    24 0000000B 83C404                          add esp, 4 * 1
    25                                          
    26 0000000E 31F6                            xor esi, esi
    27 00000010 31FF                            xor edi, edi
    28                                          rezolva:
    29 00000012 8A9E[00000000]                      mov bl, [text + esi]
    30                                              
    31 00000018 80FB00                              cmp bl, 0
    32 0000001B 7416                                je litere_mici
    33                                              
    34 0000001D 80FB41                              cmp bl, 'A'
    35 00000020 7C0E                                jl mai_departe
    36                                              
    37 00000022 80FB5A                              cmp bl, 'Z'
    38 00000025 7F09                                jg mai_departe
    39                                              
    40 00000027 889F[90010000]                      mov [sir_litere_mari + edi], bl
    41 0000002D 47                                  inc edi
    42 0000002E EB00                                jmp mai_departe
    43                                              
    44                                          mai_departe:
    45 00000030 46                                  inc esi
    46 00000031 EBDF                                jmp rezolva
    47                                          litere_mici:
    48 00000033 31FF                                xor edi, edi
    49 00000035 31F6                                xor esi, esi
    50                                              bucla:
    51 00000037 8A9E[00000000]                          mov bl, [text + esi]
    52                                              
    53 0000003D 80FB00                                  cmp bl, 0
    54 00000040 7416                                    je afiseaza
    55                                                  
    56 00000042 80FB61                                  cmp bl, 'a'
    57 00000045 7C0E                                    jl continua
    58                                                  
    59 00000047 80FB7A                                  cmp bl, 'z'
    60 0000004A 7F09                                    jg continua
    61                                                  
    62 0000004C 889F[C8000000]                          mov [sir_litere_mici + edi], bl
    63 00000052 47                                      inc edi
    64 00000053 EB00                                    jmp continua
    65                                              continua:
    66 00000055 46                                      inc esi
    67 00000056 EBDF                                    jmp bucla
    68                                                  
    69                                          afiseaza:
    70 00000058 68[90010000]                        push dword sir_litere_mari
    71 0000005D 68[58020000]                        push dword format
    72 00000062 FF15[00000000]                      call [printf]
    73 00000068 83C408                              add esp, 4 * 2
    74                                              
    75 0000006B 68[C8000000]                        push dword sir_litere_mici
    76 00000070 68[58020000]                        push dword format
    77 00000075 FF15[00000000]                      call [printf]
    78 0000007B 83C408                              add esp, 4 * 2
    79                                              
    80 0000007E EB00                                jmp final
    81                                          final:
    82 00000080 6A00                                push dword 0
    83 00000082 FF15[00000000]                      call [exit]
